{
	"info": {
		"_postman_id": "2c51518c-e466-4a7e-8b2d-571ffd5ffd26",
		"name": "DummyJSON_API_Test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "16008928"
	},
	"item": [
		{
			"name": "Auth",
			"item": [
				{
					"name": "Login - Successful",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 400ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(400);\r",
									"});\r",
									"\r",
									"var responseJSON = pm.response.json();\r",
									"\r",
									"pm.test(\"Response body is correct\", function () {\r",
									"    pm.expect(responseJSON).to.have.property('accessToken').that.is.a('string');\r",
									"    pm.expect(responseJSON).to.have.property('refreshToken').that.is.a('string');\r",
									"    pm.expect(responseJSON).to.have.property('id').that.is.a('number');\r",
									"    pm.expect(responseJSON).to.have.property('username').that.is.a('string');\r",
									"    pm.expect(responseJSON).to.have.property('email').that.is.a('string');\r",
									"    pm.expect(responseJSON).to.have.property('firstName').that.is.a('string');\r",
									"    pm.expect(responseJSON).to.have.property('lastName').that.is.a('string');\r",
									"    pm.expect(responseJSON).to.have.property('gender').that.is.a('string');\r",
									"    pm.expect(responseJSON).to.have.property('image').that.is.a('string');\r",
									"});\r",
									"\r",
									"pm.collectionVariables.set(\"jwtToken\", responseJSON.accessToken);\r",
									"pm.collectionVariables.set(\"refreshToken\", responseJSON.refreshToken);\r",
									"\r",
									"pm.collectionVariables.set(\"sessionCookie\", pm.cookies.get(\"accessToken\"));\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{username}}\",\r\n    \"password\": \"{{password}}\",\r\n    \"expiresInMins\": 30\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"login"
							]
						},
						"description": "## Login Endpoint\n\nThis endpoint allows users to authenticate and obtain a session token for accessing protected resources.\n\n### Request\n\n- **Method**: `POST`\n    \n- **Endpoint**: `{{baseUrl}}/auth/login`\n    \n- **Content-Type**: `application/json`\n    \n\n### Request Body\n\nThe request body must be a JSON object containing the following parameters:\n\n- **username** (string): The username of the user attempting to log in.\n    \n- **password** (string): The password associated with the username.\n    \n- **expiresInMins** (integer): The duration in minutes for which the session token should be valid.\n    \n\n### Example Request Body\n\n``` json\n{\n  \"username\": \"{{username}}\",\n  \"password\": \"{{password}}\",\n  \"expiresInMins\": 30\n}\n\n ```\n\n### Response\n\nUpon successful authentication, the server will respond with a JSON object containing the session token and additional user information. The expected response format includes:\n\n- **token** (string): A session token that can be used for subsequent requests.\n    \n- **expiresAt** (string): The expiration time of the session token.\n    \n\n### Example Response\n\n``` json\n{\n  \"token\": \"eyJhbGciOiJIUzI1NiIsInR...\",\n  \"expiresAt\": \"2023-10-10T12:00:00Z\"\n}\n\n ```\n\n### Notes\n\n- Ensure that the username and password are correct to avoid authentication errors.\n    \n- The `expiresInMins` parameter determines how long the session token will remain valid."
					},
					"response": []
				},
				{
					"name": "Login - Invalid User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 400ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(400);\r",
									"});\r",
									"\r",
									"var responseJSON = pm.response.json();\r",
									"\r",
									"pm.test(\"Response body is correct\", function () {\r",
									"    pm.expect(responseJSON).to.have.property('message').that.is.a('string');\r",
									"});\r",
									"\r",
									"pm.test(\"Body contains 'Invalid credentials'\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Invalid credentials\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{$randomUserName}}\",\r\n    \"password\": \"{{password}}\",\r\n    \"expiresInMins\": 30\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login - Invalid Password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 400ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(400);\r",
									"});\r",
									"\r",
									"var responseJSON = pm.response.json();\r",
									"\r",
									"pm.test(\"Response body is correct\", function () {\r",
									"    pm.expect(responseJSON).to.have.property('message').that.is.a('string');\r",
									"});\r",
									"\r",
									"pm.test(\"Body contains 'Invalid credentials'\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Invalid credentials\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{username}}\",\r\n    \"password\": \"{{$randomPassword}}\",\r\n    \"expiresInMins\": 30\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login - Invalid Body",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 400ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(400);\r",
									"});\r",
									"\r",
									"var responseJSON = pm.response.json();\r",
									"\r",
									"pm.test(\"Response body is correct\", function () {\r",
									"    pm.expect(responseJSON).to.have.property('message').that.is.a('string');\r",
									"});\r",
									"\r",
									"pm.test(\"Body contains 'Unexpected token'\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Unexpected token\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{username}}\",\r\n    \"password\": \"{{password}}\",\r\n    \"email\": {{$randomEmail}},\r\n    \"expiresInMins\": 30\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get current auth user - Fake Token",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const fakeToken = \"eyFakeHeader.\" + Math.random().toString(36).substring(2) + \".fakeSignature\";\r",
									"pm.collectionVariables.set(\"invalid_token\", fakeToken);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Fake token should not produce error 500\", function () {\r",
									"    pm.expect(pm.response.code).to.not.eql(500)\r",
									"});\r",
									"\r",
									"pm.test(\"The response should contain a 401, 403, or 400 status code\", () => {\r",
									"  pm.expect([\"401\", \"403\", \"400\"]).to.include(pm.response.code.toString());\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 400ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(400);\r",
									"});\r",
									"\r",
									"var responseJSON = pm.response.json();\r",
									"\r",
									"pm.test(\"Response body is correct\", function () {\r",
									"    pm.expect(responseJSON).to.have.property('message').that.is.a('string');\r",
									"});\r",
									"\r",
									"pm.test(\"Body contains 'invalid token'\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"invalid token\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{invalid_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/auth/me",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"me"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get current auth user - Invalid Token",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const fakeToken = \"eyFakeHeader\" + Math.random().toString(36).substring(2) + \".fakeSignature\";\r",
									"pm.collectionVariables.set(\"invalid_token\", fakeToken);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Invalid token should not produce error 500\", function () {\r",
									"    pm.expect(pm.response.code).to.not.eql(500)\r",
									"});\r",
									"\r",
									"pm.test(\"The response should contain a 401, 403, or 400 status code\", () => {\r",
									"  pm.expect([\"401\", \"403\", \"400\"]).to.include(pm.response.code.toString());\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 400ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(400);\r",
									"});\r",
									"\r",
									"var responseJSON = pm.response.json();\r",
									"\r",
									"pm.test(\"Response body is correct\", function () {\r",
									"    pm.expect(responseJSON).to.have.property('message').that.is.a('string');\r",
									"});\r",
									"\r",
									"pm.test(\"Body contains 'Invalid/Expired Token'\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Invalid/Expired Token\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{invalid_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/auth/me",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"me"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get current auth user - Successful",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 400ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(400);\r",
									"});\r",
									"\r",
									"var responseJSON = pm.response.json();\r",
									"\r",
									"pm.test(\"Response body is correct\", function () {\r",
									"    pm.expect(responseJSON).to.have.property('username').that.is.a('string');\r",
									"    pm.expect(responseJSON).to.have.property('password').that.is.a('string');\r",
									"});\r",
									"\r",
									"pm.test(\"Body contains the data from the current user\", function () {    \r",
									"    const expectedUser = pm.collectionVariables.get(\"username\");\r",
									"    const expectedPassword = pm.collectionVariables.get(\"password\");\r",
									"    \r",
									"    pm.expect(responseJSON.username).to.eql(expectedUser);\r",
									"    pm.expect(responseJSON.password).to.eql(expectedPassword);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwtToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/auth/me",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"me"
							]
						}
					},
					"response": []
				},
				{
					"name": "Refresh auth session - Successful using refresh token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 400ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(400);\r",
									"});\r",
									"\r",
									"var responseJSON = pm.response.json();\r",
									"\r",
									"pm.test(\"Response body is correct\", function () {\r",
									"    pm.expect(responseJSON).to.have.property('accessToken').that.is.a('string');\r",
									"    pm.expect(responseJSON).to.have.property('refreshToken').that.is.a('string');\r",
									"});\r",
									"\r",
									"pm.collectionVariables.set(\"jwtToken\", responseJSON.accessToken);\r",
									"pm.collectionVariables.set(\"refreshToken\", responseJSON.refreshToken);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"refreshToken\": \"{{refreshToken}}\",\r\n    \"expiresInMins\": 30\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/auth/refresh",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"refresh"
							]
						}
					},
					"response": []
				},
				{
					"name": "Refresh auth session - Successful using cookie",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 400ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(400);\r",
									"});\r",
									"\r",
									"var responseJSON = pm.response.json();\r",
									"\r",
									"pm.test(\"Response body is correct\", function () {\r",
									"    pm.expect(responseJSON).to.have.property('accessToken').that.is.a('string');\r",
									"    pm.expect(responseJSON).to.have.property('refreshToken').that.is.a('string');\r",
									"});\r",
									"\r",
									"pm.collectionVariables.set(\"jwtToken\", responseJSON.accessToken);\r",
									"pm.collectionVariables.set(\"refreshToken\", responseJSON.refreshToken);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{    \r\n    \"expiresInMins\": 30\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/auth/refresh",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"refresh"
							]
						}
					},
					"response": []
				},
				{
					"name": "Refresh auth session - Fake Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Fake token should not produce error 500\", function () {\r",
									"    pm.expect(pm.response.code).to.not.eql(500)\r",
									"});\r",
									"\r",
									"pm.test(\"The response should contain a 401, 403, or 400 status code\", () => {\r",
									"  pm.expect([\"401\", \"403\", \"400\"]).to.include(pm.response.code.toString());\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 400ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(400);\r",
									"});\r",
									"\r",
									"var responseJSON = pm.response.json();\r",
									"\r",
									"pm.test(\"Response body is correct\", function () {\r",
									"    pm.expect(responseJSON).to.have.property('message').that.is.a('string');\r",
									"});\r",
									"\r",
									"pm.test(\"Body contains 'Invalid refresh token'\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Invalid refresh token\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const fakeToken = \"eyFakeHeader.\" + Math.random().toString(36).substring(2) + \".fakeSignature\";\r",
									"pm.collectionVariables.set(\"invalid_token\", fakeToken);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"refreshToken\": \"{{invalid_token}}\",\r\n    \"expiresInMins\": 30\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/auth/refresh",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"refresh"
							]
						}
					},
					"response": []
				},
				{
					"name": "Refresh auth session - Invalid Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Invalid token should not produce error 500\", function () {\r",
									"    pm.expect(pm.response.code).to.not.eql(500)\r",
									"});\r",
									"\r",
									"pm.test(\"The response should contain a 401, 403, or 400 status code\", () => {\r",
									"  pm.expect([\"401\", \"403\", \"400\"]).to.include(pm.response.code.toString());\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 400ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(400);\r",
									"});\r",
									"\r",
									"var responseJSON = pm.response.json();\r",
									"\r",
									"pm.test(\"Response body is correct\", function () {\r",
									"    pm.expect(responseJSON).to.have.property('message').that.is.a('string');\r",
									"});\r",
									"\r",
									"pm.test(\"Body contains 'Invalid refresh token'\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Invalid refresh token\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const fakeToken = \"eyFakeHeader\" + Math.random().toString(36).substring(2) + \".fakeSignature\";\r",
									"pm.collectionVariables.set(\"invalid_token\", fakeToken);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"refreshToken\": \"{{invalid_token}}\",\r\n    \"expiresInMins\": 30\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/auth/refresh",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"refresh"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Products",
			"item": [
				{
					"name": "Get all products - Successful",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 400ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(400);\r",
									"});\r",
									"\r",
									"var responseJSON = pm.response.json();\r",
									"\r",
									"pm.test(\"Response body is correct\", function () {\r",
									"    pm.expect(responseJSON).to.have.property('products').that.is.a('array');\r",
									"    pm.expect(responseJSON).to.have.property('total').that.is.a('number');\r",
									"    pm.expect(responseJSON).to.have.property('skip').that.is.a('number');\r",
									"    pm.expect(responseJSON).to.have.property('limit').that.is.a('number');\r",
									"});\r",
									"\r",
									"var products = responseJSON.products;\r",
									"var randomIndex = Math.floor(Math.random() * products.length);\r",
									"\r",
									"pm.collectionVariables.set(\"productsTotal\", products.length);\r",
									"pm.collectionVariables.set(\"productId\", products[randomIndex].id);\r",
									"pm.collectionVariables.set(\"productDescription\", products[randomIndex].description);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/products",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all products - Successful Sort",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 400ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(400);\r",
									"});\r",
									"\r",
									"var responseJSON = pm.response.json();\r",
									"\r",
									"pm.test(\"Response body is correct\", function () {\r",
									"    pm.expect(responseJSON).to.have.property('products').that.is.a('array');\r",
									"    pm.expect(responseJSON).to.have.property('total').that.is.a('number');\r",
									"    pm.expect(responseJSON).to.have.property('skip').that.is.a('number');\r",
									"    pm.expect(responseJSON).to.have.property('limit').that.is.a('number');\r",
									"});\r",
									"\r",
									"var products = responseJSON.products;\r",
									"var randomIndex = Math.floor(Math.random() * products.length);\r",
									"\r",
									"pm.collectionVariables.set(\"productsTotal\", products.length);\r",
									"pm.collectionVariables.set(\"productId\", products[randomIndex].id);\r",
									"pm.collectionVariables.set(\"productDescription\", products[randomIndex].description);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var orderKeywords = [\"asc\", \"desc\"];\r",
									"\r",
									"var randomIndexOrder = Math.floor(Math.random() * orderKeywords.length)\r",
									"\r",
									"pm.collectionVariables.set(\"orderKeyword\", orderKeywords[randomIndexOrder]);\r",
									"\r",
									"var sortByKeywords = [\"title\", \"category\", \"price\", \"brand\"];\r",
									"\r",
									"var randomIndexSort = Math.floor(Math.random() * sortByKeywords.length)\r",
									"\r",
									"pm.collectionVariables.set(\"sortByKeyword\", sortByKeywords[randomIndexSort]);\r",
									"\r",
									"console.log(`Order by: ${orderKeywords[randomIndexOrder]}`)\r",
									"console.log(`Sort By: ${sortByKeywords[randomIndexSort]}`)"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/products?sortBy={{sortByKeyword}}&order={{orderKeyword}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "sortBy",
									"value": "{{sortByKeyword}}"
								},
								{
									"key": "order",
									"value": "{{orderKeyword}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all products - Invalid Sort",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 400ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(400);\r",
									"});\r",
									"\r",
									"var responseJSON = pm.response.json();\r",
									"\r",
									"pm.test(\"Response body is correct\", function () {\r",
									"    pm.expect(responseJSON).to.have.property('products').that.is.a('array');\r",
									"    pm.expect(responseJSON).to.have.property('total').that.is.a('number');\r",
									"    pm.expect(responseJSON).to.have.property('skip').that.is.a('number');\r",
									"    pm.expect(responseJSON).to.have.property('limit').that.is.a('number');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var orderKeywords = [\"asc\", \"desc\"];\r",
									"\r",
									"var randomIndexOrder = Math.floor(Math.random() * orderKeywords.length)\r",
									"\r",
									"pm.collectionVariables.set(\"orderKeyword\", orderKeywords[randomIndexOrder]);\r",
									"\r",
									"console.log(`Order by: ${orderKeywords[randomIndexOrder]}`)\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/products?sortBy={{$randomAdjective}}&order={{orderKeyword}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "sortBy",
									"value": "{{$randomAdjective}}"
								},
								{
									"key": "order",
									"value": "{{orderKeyword}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all products - Invalid Sort - Order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 400ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(400);\r",
									"});\r",
									"\r",
									"var responseJSON = pm.response.json();\r",
									"\r",
									"pm.test(\"Response body is correct\", function () {\r",
									"    pm.expect(responseJSON).to.have.property('message').that.is.a('string');\r",
									"});\r",
									"\r",
									"pm.test(\"Body contains Order can be: 'asc' or 'desc'\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Order can be: 'asc' or 'desc'\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/products?sortBy={{$randomAdjective}}&order={{$randomAdjective}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "sortBy",
									"value": "{{$randomAdjective}}"
								},
								{
									"key": "order",
									"value": "{{$randomAdjective}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all products - Successful Limit Skip Select",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseJSON = pm.response.json();\r",
									"var products = responseJSON.products;\r",
									"var randomIndex = Math.floor(Math.random() * products.length);\r",
									"var expectedLimit = pm.collectionVariables.get(\"randomLimit\");\r",
									"var expectedSkip = pm.collectionVariables.get(\"randomSkip\");\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 400ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is correct\", function () {\r",
									"    pm.expect(responseJSON).to.have.property('products').that.is.a('array');\r",
									"    pm.expect(responseJSON).to.have.property('total').that.is.a('number');\r",
									"    pm.expect(responseJSON).to.have.property('skip').that.is.a('number');\r",
									"    pm.expect(responseJSON).to.have.property('limit').that.is.a('number');\r",
									"});\r",
									"\r",
									"pm.collectionVariables.set(\"productsTotal\", products.length);\r",
									"pm.collectionVariables.set(\"productId\", products[randomIndex].id);\r",
									"pm.collectionVariables.set(\"productDescription\", products[randomIndex].description);\r",
									"\r",
									"pm.test(\"First product has the correct properties\", function () {\r",
									"    \r",
									"    const product = responseJSON.products[0]; // Ajusta según tu estructura\r",
									"\r",
									"    pm.expect(product).to.have.all.keys(\"id\", \"title\", \"description\", \"price\");\r",
									"});\r",
									"\r",
									"console.log(expectedLimit)\r",
									"pm.test(`Body contains the right limit: ${expectedLimit}`, function (){\r",
									"\r",
									"    pm.expect(responseJSON.limit).to.eq(expectedLimit);\r",
									"});\r",
									"\r",
									"console.log(expectedSkip)\r",
									"pm.test(`Body contains the right limit: ${expectedSkip}`, function (){\r",
									"\r",
									"    pm.expect(responseJSON.skip).to.eq(expectedSkip);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									"const randomLimit = Math.floor(Math.random() * (100 - 5 + 1)) + 5;\r",
									"const randomSkip = Math.floor(Math.random() * (100 - 5 + 1)) + 5;\r",
									"\r",
									"pm.collectionVariables.set(\"randomLimit\", randomLimit);\r",
									"pm.collectionVariables.set(\"randomSkip\", randomSkip);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/products?limit={{randomLimit}}&skip={{randomSkip}}&select=title,description,price",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "limit",
									"value": "{{randomLimit}}"
								},
								{
									"key": "skip",
									"value": "{{randomSkip}}"
								},
								{
									"key": "select",
									"value": "title,description,price"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all products - Invalid Limit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 400ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(400);\r",
									"});\r",
									"\r",
									"var responseJSON = pm.response.json();\r",
									"\r",
									"pm.test(\"Response body is correct\", function () {\r",
									"    pm.expect(responseJSON).to.have.property('message').that.is.a('string');\r",
									"});\r",
									"\r",
									"pm.test(\"Body contains Invalid 'limit' - must be a number\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Invalid 'limit' - must be a number\");\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/products?limit={{$randomAdjective}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "limit",
									"value": "{{$randomAdjective}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all products - Invalid Skip",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 400ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(400);\r",
									"});\r",
									"\r",
									"var responseJSON = pm.response.json();\r",
									"\r",
									"pm.test(\"Response body is correct\", function () {\r",
									"    pm.expect(responseJSON).to.have.property('message').that.is.a('string');\r",
									"});\r",
									"\r",
									"pm.test(\"Body contains Invalid 'skip' - must be a number\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Invalid 'skip' - must be a number\");\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/products?skip={{$randomAdjective}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "skip",
									"value": "{{$randomAdjective}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get single product - Successful",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 400ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(400);\r",
									"});\r",
									"\r",
									"var responseJSON = pm.response.json();\r",
									"\r",
									"pm.test(\"Response body is correct\", function () {\r",
									"    pm.expect(responseJSON).to.have.property('id').that.is.a('number');\r",
									"    pm.expect(responseJSON).to.have.property('title').that.is.a('string');\r",
									"    pm.expect(responseJSON).to.have.property('description').that.is.a('string');\r",
									"    pm.expect(responseJSON).to.have.property('category').that.is.a('string');\r",
									"    pm.expect(responseJSON).to.have.property('price').that.is.a('number');\r",
									"});\r",
									"\r",
									"pm.test(\"Response data matches the selected product \", function () {\r",
									"    pm.expect(responseJSON.id).to.equal(pm.collectionVariables.get(\"productId\"));\r",
									"    pm.expect(responseJSON.description).to.equal(pm.collectionVariables.get(\"productDescription\"));\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/products/{{productId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								"{{productId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get single product - Invalid ID product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 400ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(400);\r",
									"});\r",
									"\r",
									"var responseJSON = pm.response.json();\r",
									"\r",
									"pm.test(\"Response body is correct\", function () {\r",
									"    pm.expect(responseJSON).to.have.property('message').that.is.a('string');\r",
									"});\r",
									"\r",
									"pm.test(\"Body contains 'not found'\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"not found\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let min = 5.5;\r",
									"let max = 10.0;\r",
									"\r",
									"let invalidIdProduct = Math.random() * (max - min) + min;\r",
									"\r",
									"invalidIdProduct = parseFloat(invalidIdProduct.toFixed(2));\r",
									"\r",
									"pm.collectionVariables.set(\"invalidIdProduct\", invalidIdProduct);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/products/{{invalidIdProduct}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								"{{invalidIdProduct}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search product - Successful",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 400ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(400);\r",
									"});\r",
									"\r",
									"var responseJSON = pm.response.json();\r",
									"\r",
									"pm.test(\"Response body is correct\", function () {\r",
									"    pm.expect(responseJSON).to.have.property('products').that.is.a('array');\r",
									"    pm.expect(responseJSON).to.have.property('total').that.is.a('number');\r",
									"    pm.expect(responseJSON).to.have.property('skip').that.is.a('number');\r",
									"    pm.expect(responseJSON).to.have.property('limit').that.is.a('number');\r",
									"});\r",
									"\r",
									"var searchKeyword = pm.environment.get(\"searchKeyword\");\r",
									"\r",
									"pm.test(`Body contains keyword \"${searchKeyword}\"`, function () {\r",
									"    pm.expect(pm.response.text()).to.include(searchKeyword);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Array including the keywords to search for products\r",
									"const keywords = [\"phone\", \"laptop\", \"fragrance\", \"shoes\", \"flavor\"];\r",
									"\r",
									"const randomKeyword = keywords[Math.floor(Math.random() * keywords.length)];\r",
									"\r",
									"pm.environment.set(\"searchKeyword\", randomKeyword);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/products/search?q={{searchKeyword}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								"search"
							],
							"query": [
								{
									"key": "q",
									"value": "{{searchKeyword}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search product - Invalid Search keyword",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 400ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(400);\r",
									"});\r",
									"\r",
									"var responseJSON = pm.response.json();\r",
									"\r",
									"pm.test(\"Response body is correct\", function () {\r",
									"    pm.expect(responseJSON).to.have.property('products').that.is.a('array');\r",
									"    pm.expect(responseJSON).to.have.property('total').that.is.a('number');\r",
									"    pm.expect(responseJSON).to.have.property('skip').that.is.a('number');\r",
									"    pm.expect(responseJSON).to.have.property('limit').that.is.a('number');\r",
									"});\r",
									"\r",
									"var searchKeyword = pm.environment.get(\"searchKeyword\");\r",
									"\r",
									"pm.test(`Product array is empty \"${searchKeyword}\"`, function () {\r",
									"    pm.expect(responseJSON.products.length).to.eq(0)\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Array including the keywords to search for products\r",
									"const keywords = [\"phone\", \"laptop\", \"fragrance\", \"shoes\", \"flavor\"];\r",
									"\r",
									"const randomKeyword = keywords[Math.floor(Math.random() * keywords.length)];\r",
									"\r",
									"pm.environment.set(\"searchKeyword\", randomKeyword);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/products/search?q={{$randomEmail}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								"search"
							],
							"query": [
								{
									"key": "q",
									"value": "{{$randomEmail}}"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://dummyjson.com",
			"type": "string"
		},
		{
			"key": "jwtToken",
			"value": ""
		},
		{
			"key": "refreshToken",
			"value": ""
		},
		{
			"key": "sessionCookie",
			"value": ""
		},
		{
			"key": "username",
			"value": "jamesd",
			"type": "string"
		},
		{
			"key": "password",
			"value": "jamesdpass",
			"type": "string"
		},
		{
			"key": "invalid_token",
			"value": ""
		},
		{
			"key": "productId",
			"value": ""
		},
		{
			"key": "productDescription",
			"value": ""
		},
		{
			"key": "productsTotal",
			"value": ""
		},
		{
			"key": "randomIdProduct",
			"value": ""
		},
		{
			"key": "invalidIdProduct",
			"value": ""
		},
		{
			"key": "randomLimit",
			"value": ""
		},
		{
			"key": "randomSkip",
			"value": ""
		},
		{
			"key": "orderKeyword",
			"value": ""
		},
		{
			"key": "sortByKeyword",
			"value": ""
		}
	]
}